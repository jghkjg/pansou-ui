---
import Layout from '../layouts/Layout.astro';
import collectionsData from '../data/collections.json';

const { categories, collections } = collectionsData;

// 默认按更新日期降序排序
collections.sort((a, b) => new Date(b.updated) - new Date(a.updated));

// 平台图标和名称映射
const platformMap = {
    '115': { name: '115网盘', icon: 'fa-box', color: 'bg-orange-500' },
    '123': { name: '123网盘', icon: 'fa-hashtag', color: 'bg-green-500' },
    'mobile': { name: '移动云盘', icon: 'fa-mobile-alt', color: 'bg-blue-500' },
    'xunlei': { name: '迅雷云盘', icon: 'fa-bolt', color: 'bg-yellow-500' },
    'aliyun': { name: '阿里云盘', icon: 'fa-cloud', color: 'bg-purple-500' },
    'uc': { name: 'UC网盘', icon: 'fa-compass', color: 'bg-red-500' },
    'tianyi': { name: '天翼云盘', icon: 'fa-cloud', color: 'bg-pink-500' },
    'quark': { name: '夸克网盘', icon: 'fa-search', color: 'bg-indigo-500' },
    'others': { name: '其他网盘', icon: 'fa-ellipsis-h', color: 'bg-gray-500' },
    'baidu': { name: '百度网盘', icon: 'fa-database', color: 'bg-blue-600' }
};
---

<Layout title="资源集合 - 盘搜">
    <div class="max-w-6xl mx-auto">
        <!-- 标题区域 -->
        <div class="text-center mb-10 fade-in">
            <div class="w-16 h-16 flex items-center justify-center mx-auto mb-4">
                <img src="/logo.png" alt="半条死鱼-网盘搜索 Logo" class="w-full h-full object-contain">
            </div>
            <h1 class="text-4xl font-bold mb-2 bg-gradient-to-r from-ios-blue to-blue-500 bg-clip-text text-transparent">资源集合</h1>
            <p class="text-ios-gray text-lg">精心整理的优质资源合集,陆续更新中...</p>
            <div class="mt-4">
                <a href="/" class="text-ios-blue hover:underline text-sm">← 返回搜索页面</a>
            </div>
        </div>
        
        <style>
            .ios-button {
                background: white;
                border: 1px solid #e5e7eb;
                color: #6b7280;
                transition: all 0.2s;
                cursor: pointer;
            }
            
            .ios-button:not(.opacity-50):hover {
                background: #3b82f6;
                color: white;
                border-color: #3b82f6;
            }

            /* 隐藏滚动条但保留滚动功能 */
            .no-scrollbar::-webkit-scrollbar { display: none; }
            .no-scrollbar { -ms-overflow-style: none; scrollbar-width: none; }

            .category-tab {
                white-space: nowrap; /* 防止按钮文字换行 */
            }
            .sort-button {
                padding: 8px 16px;
                border-radius: 20px;
                border: 1px solid #e5e7eb;
                background: white;
                color: #6b7280;
                transition: all 0.2s;
                cursor: pointer;
                font-size: 14px;
            }
            .sort-button.active, .sort-button:hover {
                background: #3b82f6;
                color: white;
                border-color: #3b82f6;
            }
        </style>

        <!-- 分类导航 -->
        <div class="mb-8">
            <div class="flex overflow-x-auto no-scrollbar py-2 gap-3 justify-start md:justify-center">
                <button class="category-tab active" data-category="all">
                    <i class="fas fa-th-large mr-2"></i>全部
                </button>
                {categories.map(category => (
                    <button class="category-tab" data-category={category.id}>
                        <i class={`fas ${category.icon} mr-2`}></i>
                        {category.name}
                    </button>
                ))}
            </div>
        </div>

        <!-- 筛选和排序 -->
       <div class="flex flex-col sm:flex-row justify-center items-center gap-4 mb-8">
           <!-- 搜索框 -->
           <div class="ios-card p-1 search-box flex-grow w-full sm:w-auto">
               <div class="flex items-center">
                   <div class="pl-4 text-ios-gray">
                       <i class="fas fa-search"></i>
                   </div>
                   <input
                       type="text"
                       id="collectionSearch"
                       placeholder="搜索集合或标签..."
                       class="w-full py-3 px-4 bg-transparent outline-none text-base placeholder-ios-gray"
                       autocomplete="off"
                   >
               </div>
           </div>
           <!-- 排序方式 -->
            <div id="sort-container" class="flex items-center gap-2">
                <button class="sort-button active" data-sort="updated">
                    <i class="fas fa-sync-alt mr-1"></i>按更新
                </button>
                <button class="sort-button" data-sort="views">
                    <i class="fas fa-fire mr-1"></i>按热度
                </button>
                <button class="sort-button" data-sort="created">
                    <i class="fas fa-calendar-plus mr-1"></i>按创建
                </button>
            </div>
       </div>

        <!-- 集合展示区域 -->
        <div id="collectionsContainer" class="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
            {collections.map(collection => {
                const category = categories.find(cat => cat.id === collection.category);
                return (
                    <div class="ios-card collection-card p-6" data-id={collection.id} data-category={collection.category} data-tags={collection.tags.join(',').toLowerCase()} data-views={collection.views || 0} data-updated={collection.updated} data-created={collection.created}>
                        <!-- 集合封面 -->
                        <div class="mb-4">
                            {collection.cover ? (
                                <div class="collection-cover overflow-hidden">
                                    <img
                                        src={collection.cover}
                                        alt={collection.title}
                                        class="w-full h-full object-cover"
                                        onError="this.style.display='none'; this.nextElementSibling.style.display='flex';"
                                    />
                                    <div class="collection-cover flex items-center justify-center text-white text-4xl" style="display: none;">
                                        <i class={`fas ${category?.icon || 'fa-folder'}`}></i>
                                    </div>
                                </div>
                            ) : (
                                <div class="collection-cover flex items-center justify-center text-white text-4xl">
                                    <i class={`fas ${category?.icon || 'fa-folder'}`}></i>
                                </div>
                            )}
                        </div>
                        
                        <!-- 集合信息 -->
                        <div class="mb-4">
                            <div class="flex items-center justify-between mb-2">
                                <h3 class="text-xl font-semibold text-ios-dark line-clamp-2">{collection.title}</h3>
                                <span class={`platform-icon ${category?.color || 'bg-gray-500'} text-xs px-2 py-1 rounded-full`}>
                                    <i class={`fas ${category?.icon || 'fa-folder'}`}></i>
                                </span>
                            </div>
                            <p class="text-ios-gray text-sm mb-3 line-clamp-2">{collection.description}</p>
                            
                            <!-- 标签 -->
                            <div class="flex flex-wrap gap-1 mb-3">
                                {collection.tags.slice(0, 3).map(tag => (
                                    <span class="platform-tag text-xs">{tag}</span>
                                ))}
                                {collection.tags.length > 3 && (
                                    <span class="platform-tag text-xs">+{collection.tags.length - 3}</span>
                                )}
                            </div>
                            
                            <!-- 统计信息 -->
                            <div class="flex items-center justify-between text-sm text-ios-gray">
                                <span>
                                    <i class="fas fa-file-alt mr-1"></i>
                                    {collection.resourceCount} 个资源
                                </span>
                                <span>
                                    <i class="fas fa-eye mr-1"></i>
                                    <span class="view-count">{collection.views || 0}</span> 次访问
                                </span>
                                <span>
                                    <i class="fas fa-clock mr-1"></i>
                                    {new Date(collection.updated).toLocaleDateString('zh-CN')}
                                </span>
                            </div>
                        </div>
                        
                        <!-- 操作按钮 -->
                        <div class="flex gap-2">
                            <a href={`/collection?id=${collection.id}`} class="flex-1 bg-gradient-to-r from-ios-blue to-blue-500 text-white rounded-xl py-2 px-4 font-medium hover:opacity-90 transition-opacity text-center">
                                查看详情
                            </a>
                        </div>
                    </div>
                );
            })}
        </div>


        <!-- 分页控件 -->
        <div class="mt-8 flex justify-center">
            <div id="pagination" class="flex items-center space-x-2">
                <button id="firstPage" class="ios-button px-3 py-1 rounded">
                    <i class="fas fa-angle-double-left"></i>
                </button>
                <button id="prevPage" class="ios-button px-3 py-1 rounded">
                    <i class="fas fa-angle-left"></i>
                </button>
                <span id="pageInfo" class="text-ios-gray mx-2"></span>
                <button id="nextPage" class="ios-button px-3 py-1 rounded">
                    <i class="fas fa-angle-right"></i>
                </button>
                <button id="lastPage" class="ios-button px-3 py-1 rounded">
                    <i class="fas fa-angle-double-right"></i>
                </button>
            </div>
        </div>

        <!-- 页脚 -->
        <div class="mt-12 text-center text-ios-gray">
            <p class="text-sm">
                <a href="/" class="text-ios-blue hover:underline">返回搜索页面</a>
            </p>
        </div>
    </div>

    <script define:vars={{ collections, platformMap }}>
    // DOM 元素
    const categoryTabs = document.querySelectorAll('.category-tab');
    const searchInput = document.getElementById('collectionSearch');
    const sortButtons = document.querySelectorAll('.sort-button');
    const collectionsContainer = document.getElementById('collectionsContainer');
    
    // 分页相关元素
    const firstPageBtn = document.getElementById('firstPage');
    const prevPageBtn = document.getElementById('prevPage');
    const nextPageBtn = document.getElementById('nextPage');
    const lastPageBtn = document.getElementById('lastPage');
    const pageInfoSpan = document.getElementById('pageInfo');
    
    let allCollectionCards = Array.from(document.querySelectorAll('.collection-card'));
    
    // 分页配置
    const ITEMS_PER_PAGE = 9; // 每页显示的集合数量
    let currentPage = 1; // 当前页码

    // 渲染集合（带分页）
    function renderCollections(cards) {
        // 计算总页数
        const totalPages = Math.ceil(cards.length / ITEMS_PER_PAGE);
        
        // 确保当前页码在有效范围内
        if (currentPage < 1) currentPage = 1;
        if (currentPage > totalPages && totalPages > 0) currentPage = totalPages;
        if (totalPages === 0) currentPage = 1;
        
        // 计算当前页要显示的集合
        const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;
        const endIndex = Math.min(startIndex + ITEMS_PER_PAGE, cards.length);
        const pageCards = cards.slice(startIndex, endIndex);
        
        // 渲染集合
        collectionsContainer.innerHTML = '';
        pageCards.forEach(card => {
            collectionsContainer.appendChild(card);
        });
        
        // 更新分页控件
        updatePagination(totalPages);
    }
    
    // 更新分页控件
    function updatePagination(totalPages) {
        // 显示页码信息
        if (totalPages > 0) {
            pageInfoSpan.textContent = `${currentPage} / ${totalPages}`;
        } else {
            pageInfoSpan.textContent = '0 / 0';
        }
        
        // 更新按钮状态
        firstPageBtn.disabled = currentPage <= 1;
        prevPageBtn.disabled = currentPage <= 1;
        nextPageBtn.disabled = currentPage >= totalPages || totalPages === 0;
        lastPageBtn.disabled = currentPage >= totalPages || totalPages === 0;
        
        // 添加按钮样式
        const buttons = [firstPageBtn, prevPageBtn, nextPageBtn, lastPageBtn];
        buttons.forEach(btn => {
            if (btn.disabled) {
                btn.classList.add('opacity-50', 'cursor-not-allowed');
                btn.classList.remove('hover:opacity-90');
            } else {
                btn.classList.remove('opacity-50', 'cursor-not-allowed');
                btn.classList.add('hover:opacity-90');
            }
        });
    }
    
    // 排序函数
    function sortCollections(cards, sortBy) {
        return [...cards].sort((a, b) => {
            const aValue = a.dataset[sortBy];
            const bValue = b.dataset[sortBy];

            if (sortBy === 'views') {
                return parseInt(bValue, 10) - parseInt(aValue, 10);
            }
            // For dates, we want descending order
            return new Date(bValue) - new Date(aValue);
        });
    }

    // 筛选和排序主函数
    function filterAndSort() {
        const activeCategory = document.querySelector('.category-tab.active').dataset.category;
        const searchTerm = searchInput.value.toLowerCase();
        const sortBy = document.querySelector('.sort-button.active').dataset.sort;

        // 1. 筛选
        let filteredCards = allCollectionCards.filter(card => {
            const cardCategory = card.dataset.category;
            const cardTags = card.dataset.tags;
            const cardTitle = card.querySelector('h3').textContent.toLowerCase();
            
            const matchesCategory = activeCategory === 'all' || cardCategory === activeCategory;
            const matchesSearch = !searchTerm || cardTitle.includes(searchTerm) || cardTags.includes(searchTerm);
            
            return matchesCategory && matchesSearch;
        });

        // 2. 排序
        const sortedCards = sortCollections(filteredCards, sortBy);
        
        // 3. 重置到第一页
        currentPage = 1;
        
        // 4. 渲染
        renderCollections(sortedCards);
    }
    
    // 分页控制函数
    function goToPage(page) {
        currentPage = page;
        filterAndSort(); // 重新渲染当前页
    }
    
    function goToFirstPage() {
        goToPage(1);
    }
    
    function goToPrevPage() {
        if (currentPage > 1) {
            goToPage(currentPage - 1);
        }
    }
    
    function goToNextPage() {
        // 总页数会在renderCollections中计算，这里简单处理
        goToPage(currentPage + 1);
    }
    
    function goToLastPage() {
        // 总页数会在renderCollections中计算，这里简单处理
        goToPage(9999); // 一个足够大的数，会在renderCollections中被修正
    }

    // 事件监听
    categoryTabs.forEach(tab => {
        tab.addEventListener('click', () => {
            categoryTabs.forEach(t => t.classList.remove('active'));
            tab.classList.add('active');
            filterAndSort();
        });
    });

    searchInput.addEventListener('input', filterAndSort);
    sortButtons.forEach(button => {
        button.addEventListener('click', () => {
            sortButtons.forEach(btn => btn.classList.remove('active'));
            button.classList.add('active');
            filterAndSort();
        });
    });
    
    // 分页按钮事件监听
    firstPageBtn.addEventListener('click', goToFirstPage);
    prevPageBtn.addEventListener('click', goToPrevPage);
    nextPageBtn.addEventListener('click', goToNextPage);
    lastPageBtn.addEventListener('click', goToLastPage);

    // 获取并更新所有访问次数
    async function fetchAllViews() {
        console.log('fetchAllViews called');
        try {
            const response = await fetch('/api/get-all-views');
            console.log('API response status:', response.status);
            if (!response.ok) {
                console.log('API response not ok');
                return;
            }
            const views = await response.json();
            console.log('Data received from API:', views);
            
            allCollectionCards.forEach(card => {
                const collectionId = card.dataset.id;
                if (views[collectionId] !== undefined) {
                    const viewCountSpan = card.querySelector('.view-count');
                    if (viewCountSpan) {
                        viewCountSpan.textContent = views[collectionId];
                    }
                    // 更新卡片上的 data-views 属性以便排序
                    card.dataset.views = views[collectionId];
                }
            });
            // 获取数据后重新排序和渲染
            filterAndSort();
        } catch (error) {
            console.error('Failed to fetch all views:', error);
        }
    }

    // 初始加载
    window.addEventListener('pageshow', (event) => {
        // 每次页面显示时都获取最新数据
        fetchAllViews();
        // 如果页面是从缓存中加载的，我们可能需要重新初始化一些状态
        if (event.persisted) {
            console.log("Page was loaded from the cache.");
            // 可以在这里添加需要重新初始化的逻辑
        }
        // 确保筛选和排序在数据更新后执行
        // fetchAllViews 内部已经调用了 filterAndSort
    });

    // 页面初次加载时，也执行一次排序
    filterAndSort();

        // 排序函数
        function sortCollections(cards, sortBy) {
            return [...cards].sort((a, b) => {
                const aValue = a.dataset[sortBy];
                const bValue = b.dataset[sortBy];

                if (sortBy === 'views') {
                    return parseInt(bValue, 10) - parseInt(aValue, 10);
                }
                // For dates, we want descending order
                return new Date(bValue) - new Date(aValue);
            });
        }

        // 筛选和排序主函数
        function filterAndSort() {
            const activeCategory = document.querySelector('.category-tab.active').dataset.category;
            const searchTerm = searchInput.value.toLowerCase();
            const sortBy = document.querySelector('.sort-button.active').dataset.sort;

            // 1. 筛选
            let filteredCards = allCollectionCards.filter(card => {
                const cardCategory = card.dataset.category;
                const cardTags = card.dataset.tags;
                const cardTitle = card.querySelector('h3').textContent.toLowerCase();
                
                const matchesCategory = activeCategory === 'all' || cardCategory === activeCategory;
                const matchesSearch = !searchTerm || cardTitle.includes(searchTerm) || cardTags.includes(searchTerm);
                
                return matchesCategory && matchesSearch;
            });

            // 2. 排序
            const sortedCards = sortCollections(filteredCards, sortBy);
            
            // 3. 渲染
            renderCollections(sortedCards);
        }

        // 事件监听
        categoryTabs.forEach(tab => {
            tab.addEventListener('click', () => {
                categoryTabs.forEach(t => t.classList.remove('active'));
                tab.classList.add('active');
                filterAndSort();
            });
        });

        searchInput.addEventListener('input', filterAndSort);
        sortButtons.forEach(button => {
            button.addEventListener('click', () => {
                sortButtons.forEach(btn => btn.classList.remove('active'));
                button.classList.add('active');
                filterAndSort();
            });
        });

        // 获取并更新所有访问次数
        async function fetchAllViews() {
            console.log('fetchAllViews called');
            try {
                const response = await fetch('/api/get-all-views');
                console.log('API response status:', response.status);
                if (!response.ok) {
                    console.log('API response not ok');
                    return;
                }
                const views = await response.json();
                console.log('Data received from API:', views);
                
                allCollectionCards.forEach(card => {
                    const collectionId = card.dataset.id;
                    if (views[collectionId] !== undefined) {
                        const viewCountSpan = card.querySelector('.view-count');
                        if (viewCountSpan) {
                            viewCountSpan.textContent = views[collectionId];
                        }
                        // 更新卡片上的 data-views 属性以便排序
                        card.dataset.views = views[collectionId];
                    }
                });
                // 获取数据后重新排序和渲染
                filterAndSort();
            } catch (error) {
                console.error('Failed to fetch all views:', error);
            }
        }

        // 初始加载
        window.addEventListener('pageshow', (event) => {
            // 每次页面显示时都获取最新数据
            fetchAllViews();
            // 如果页面是从缓存中加载的，我们可能需要重新初始化一些状态
            if (event.persisted) {
                console.log("Page was loaded from the cache.");
                // 可以在这里添加需要重新初始化的逻辑
            }
            // 确保筛选和排序在数据更新后执行
            // fetchAllViews 内部已经调用了 filterAndSort
        });

</script>
</Layout>
